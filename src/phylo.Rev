
#
# An example of jointly estimating ancestral states, tree topology, and divergence times.
#
# by Will Freyman
#


# read in data
mol_data <- readCharacterData("data/phylo_mol.nex")
morph_data <- readCharacterData("data/phylo_morph.nex")
taxa <- mol_data.taxa()

# constant rate birth death model
lambda <- 2.0
mu <- 1.0
#root_age <- 2.0
#
#for (i in 1:25) { t[i] <- taxon("sp" + i) }

root_age ~ dnUniform(0, 5)
psi ~ dnBirthDeath(lambda, mu, root_age, taxa) 

#write(psi, file="data/phylo.tree")
#psi.clamp(tree_obs)

#Q_morph := fnFreeK([0.2, 0.0], rescaled=FALSE)
q_01 ~ dnExponential(10)
q_10 ~ dnExponential(10)
Q_morph := fnFreeK([q_01, q_10], rescaled=FALSE)
pi_morph ~ dnDirichlet([1,1])
ctmc_morph ~ dnPhyloCTMC(psi, Q=Q_morph, rootFrequencies=pi_morph, nSites=1, type="Standard")
#ctmc_morph ~ dnPhyloCTMC(psi, Q=Q_morph, rootFrequencies=simplex([1,0]), nSites=1, type="Standard")
#writeNexus("data/phylo_morph.nex", morph_ctmc)
ctmc_morph.clamp(morph_data)


er ~ dnDirichlet([1,1,1,1,1,1])
pi ~ dnDirichlet([1,1,1,1])
Q_mol := fnGTR(er, pi)
ctmc_mol ~ dnPhyloCTMC(psi, Q=Q_mol, nSites=500, branchRates=0.1, type="DNA")
#writeNexus("data/phylo_mol.nex", ctmc_mol)

ctmc_mol.clamp(mol_data)

moves[1] = mvNNI(psi)
moves[2] = mvNarrow(psi)
moves[3] = mvGPR(psi)
moves[4] = mvNodeTimeScale(psi)
moves[5] = mvSubtreeScale(psi)
moves[6] = mvScale(root_age)
moves[7] = mvSimplexElementScale(er)
moves[8] = mvSimplexElementScale(pi)
moves[9] = mvScale(q_01)
moves[10] = mvScale(q_10)
moves[11] = mvSimplexElementScale(pi_morph)

mymodel = model(root_age)


monitors[1] = mnScreen(printgen=10)
monitors[2] = mnModel(printgen=10, filename="output/phylo.log")
monitors[3] = mnFile(printgen=10, filename="output/phylo.trees", psi)
monitors[4] = mnJointConditionalAncestralState(printgen=10, filename="output/phylo_anc.log", tree=psi, ctmc=ctmc_morph, type="Standard")

#
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.run(10000)


treetrace = readTreeTrace("output/phylo.trees", treetype="clock")
map_tree = mapTree(treetrace,"output/map.tree")

anc_trace = readAncestralStateTrace("output/phylo_anc.log")
anc_treetrace = readAncestralStateTreeTrace("output/phylo.trees", treetype="clock")
ancestralStateTree(map_tree, ancestral_state_trace_vector=anc_trace, tree_trace=anc_treetrace, file="output/map_anc.tree")
#
q()
